# Some handy info
# ===============
# https://yaml-multiline.info/
# >-   create one long single line of all the lines below. Replace newlines with spaces and no new line at the end
# |    keep the newlines and a single newline at the end
# |-   keep the newlines and no newline at the end
# |+   keep the newlines and all newlines at the end
#
# Tricks
# ======
# Always do this. It ensures that : in command or parameters is possible
# command: >-
#   some comand with parameters  
#
# Inspiration:
# - https://yellowdesert.consulting/2020/02/28/cloudformation-join-use-sub-instead/
#
# Using Fn::Sub: in stead of Fn::Join:
# https://theburningmonk.com/2019/05/cloudformation-protip-use-fnsub-instead-of-fnjoin/
#
# Using Fn::Sub: in stead of !Sub supports the use of AWS::LanguageExtensions transform which is needed for Fn::ForEach
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-foreach.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-languageextensions.html
#
#
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  REST API (API Gateway) directly integrated with S3 Path: /{complex}/{zip_no}/... 
  CORS, API-Key, CloudWatch Logs, no Lambda.

Parameters:
  CloudWatchRoleArn:
    Type: String
    Description: ARN of the IAM role that API Gateway can assume to write CloudWatch logs
    Default: ''

  BucketName:
    Type: String
    Default: 'documents-api-bucket'
    Description: 'Name of the S3 bucket to create'
    
  APIName:
    Type: String
    Description: 'Name of the API Gateway REST API'
    Default: 'DocumentsAPI'
  
  APIStageName:
    Type: String
    Description: 'Name of the API Gateway stage'
    Default: 'dev'
    
  APICORSAllowOrigin:
    Type: String
    Description: 'Name of the API Gateway stage'
    Default: "'*'"
    

Conditions:
  UseProvidedCloudWatchRole: !Not [!Equals [!Ref CloudWatchRoleArn, '']]
  CreateNewCloudWatchRole: !Equals [!Ref CloudWatchRoleArn, '']

Resources:
  ###############################################################################
  #  S3 bucket
  ###############################################################################
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  ###############################################################################
  #  IAM
  ###############################################################################
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ApiGateway-S3-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub 'S3AccessFor${AWS::StackName}'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${BucketName}

  CloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateNewCloudWatchRole
    Properties:
      RoleName: !Sub '${AWS::StackName}-ApiGateway-CloudWatch-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !If 
        - UseProvidedCloudWatchRole
        - !Ref CloudWatchRoleArn
        - !GetAtt CloudWatchLogsRole.Arn

  ###############################################################################
  #  CloudWatch Log Group
  ###############################################################################
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-${APIName}'
      RetentionInDays: 30

  ###############################################################################
  #  Request Validator
  ###############################################################################
  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref RestApi
      ValidateRequestParameters: true
      ValidateRequestBody: false

  ###############################################################################
  #  REST API
  ###############################################################################
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-${APIName}'
      Description: !Sub 'Documents API for ${AWS::StackName}'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'application/pdf'
        - 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        - 'application/msword'
        - 'image/*'
        - 'application/octet-stream'

  ComplexResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: '{complex}'

  ZipResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ComplexResource
      PathPart: '{zip_no}'

  FileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref ZipResource
      PathPart: '{filename}'

  ###############################################################################
  #  API Key & Usage Plan
  ###############################################################################
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: APIStage
    Properties:
      Name: !Sub '${AWS::StackName}-API-key'
      Description: !Sub 'API Key for ${AWS::StackName} Documents API'
      Enabled: true

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub '${AWS::StackName}-usage-plan'
      Description: !Sub 'Usage plan for ${AWS::StackName} Documents API'
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref APIStage
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      Quota:
        Limit: 10000
        Period: DAY

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyType: API_KEY
      KeyId: !Ref ApiKey
      UsagePlanId: !Ref UsagePlan

  ###############################################################################
  #  Methods
  ###############################################################################
  ###############################################################################
  #  GET  /
  #  List all complex folders via delimiter query
  ###############################################################################
  #
  # === WORKS ===
  #  
  RootGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: GET

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      # RequestParameters:

      # Integration request settings
      # ----------------------------
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}'
        RequestParameters:
          integration.request.querystring.list-type: "'2'"
          integration.request.querystring.delimiter: "'/'"
        PassthroughBehavior: WHEN_NO_TEMPLATES

        # Integration response settings
        # ----------------------------
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
#              application/json: |
#                ## 1) Ruim de XML-declaratie en namespace op
#                #set($raw1 = $input.body)
#                #set($raw2 = $raw1.replaceAll("<\\?xml.*?\\?>", ""))
#                #set($raw = $raw2.replaceAll("xmlns=\"[^\"]*\"", ""))
#                ## 2) Prepareer de lijst
#                #set($folders = [])
#                ## 3) Split op <Prefix> en haal tussen de tags de foldernaam
#                #foreach($segment in $raw.split("<Prefix>"))
#                  #if($foreach.index > 0)
#                    ## pak alles v??r </Prefix>
#                    #set($name = $segment.split("</Prefix>")[0])
#                    ## verwijder trailing slash
#                    #if($name.endsWith("/"))
#                      #set($name = $name.substring(0, $name.length() - 1))
#                    #end
#                    ## voeg toe als niet-leeg
#                    #if($name != "")
#                      #set($void = $folders.add($name))
#                    #end
#                  #end
#                #end
#                ## 4) Output als JSON
#                $util.toJson($folders)

              application/xml: |
                ##  This template will create a list of all the folders in the root
                ##
                ##  https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
                ##
                ## For debuging purposes set debugVTL to true (extra output) or false (=no extra output)
                #set($debugVTL = true)
                ##
                ## Start of JSON output
                {
                ## input.body might have same chars that need escaping to create a valid JSON
                #if($debugVTL) "DEBUG_inputbody": "$util.escapeJavaScript($input.body)",
                #end
                #set($bucketName = "")
                #foreach($part in $input.body.split("<Name>"))
                    #if($foreach.index > 0)  ## index starts with 0, first part is not required 
                        #set($bucketName = $part.split("</Name>")[0]) ## get all text before the prefix
                    #end
                #end
                #if($debugVTL) "DEBUG_bucketName": "$bucketName",
                #end
                ##
                ## https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference
                #set($resourcePath = $context.resourcePath)
                #if($debugVTL) "DEBUG_resourcePath": "$resourcePath",
                #end
                #set($domainName = $context.domainName)
                #if($debugVTL) "DEBUG_domainName": "$domainName",
                #end
                #set($stageName = $context.stage)
                #if($debugVTL) "DEBUG_stageName": "$stageName",
                #end
                #set($pathText = $context.path)
                #if($debugVTL) "DEBUG_pathText": "$pathText",
                #end
                #set($folders = [])
                #set($foldersExtended = [])
                #foreach($part in $input.body.split("<CommonPrefixes>"))
                    #if($foreach.index > 0)  ## index starts with 0, first part is not required 
                        #set($segment = $part.replaceAll("<Prefix>", ""))  ## remove <Prefix> text from part
                        #set($name = $segment.split("</Prefix>")[0]) ## get all text before the prefix
                        #if($name != "")
                            #set($void = $folders.add($name))
                            #set($void = $foldersExtended.add("https://$domainName$pathText$name"))
                        #end        
                    #end 
                #end
                #if($debugVTL) "DEBUG_folders": "$folders",
                #end
                ##
                ## This is where the required output is created
                ## ============================================
                ##
                ## Create the folderlist in JSON format 
                "folderlist": [
                    #foreach($prefix in $foldersExtended)
                        "$prefix"#if($foreach.hasNext),#end  ##add the prefix and a , after every prefix. Except for the last one
                #end
                ]
                ## End of JSON output
                }

          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  GET  /{complex}    doesn't work
  #  GET  /{complex}/   works 
  #  List zip_no folders inside complex
  ###############################################################################
  #
  # === NEEDS TESTING ===
  #
  ComplexGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ComplexResource
      HttpMethod: GET

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true

      # Integration request settings
      # ----------------------------  
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}'
        RequestParameters:
          integration.request.querystring.list-type: "'2'"
          integration.request.querystring.delimiter: "'/'"
          integration.request.querystring.prefix: "method.request.path.complex"
        PassthroughBehavior: WHEN_NO_TEMPLATES

        # Integration response settings
        # ----------------------------
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
#              application/json: |
#                #set($inputRoot = $input.path('$'))
#                #set($prefixes = [])
#                #set($complexParam = $input.params('complex'))
#                #if($complexParam && $complexParam.length() > 0)
#                  #set($complexPrefix = $complexParam + '/')
#                  #if($inputRoot.ListBucketResult.CommonPrefixes)
#                    #foreach($prefix in $inputRoot.ListBucketResult.CommonPrefixes)
#                      #set($prefixStr = $prefix.Prefix.toString())
#                      #if($prefixStr.startsWith($complexPrefix))
#                        #set($subPath = $prefixStr.substring($complexPrefix.length()))
#                        #if($subPath.endsWith('/'))
#                          #set($subPath = $subPath.substring(0, $subPath.length() - 1))
#                        #end
#                        #if($subPath.length() > 0)
#                          #set($void = $prefixes.add($subPath))
#                        #end
#                      #end
#                    #end
#                  #end
#                #end
#                $util.toJson($prefixes)

              application/xml: |
                ##  This template will create a list of all the folders in the root
                ##
                ##  https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
                ##
                ## For debuging purposes set debugVTL to true (extra output) or false (=no extra output)
                #set($debugVTL = true)
                ##
                ## Start of JSON output
                {
                ## input.body might have same chars that need escaping to create a valid JSON
                #if($debugVTL) "DEBUG_inputbody": "$util.escapeJavaScript($input.body)",
                #end
                #set($complexParam = $input.params('complex'))
                #if($debugVTL) "DEBUG_complexParameter": "$complexParam",
                #end
                #set($bucketName = "")
                #foreach($part in $input.body.split("<Name>"))
                    #if($foreach.index > 0)  ## index starts with 0, first part is not required 
                        #set($bucketName = $part.split("</Name>")[0]) ## get all text before the prefix
                    #end
                #end
                #if($debugVTL) "DEBUG_bucketName": "$bucketName",
                #end
                ##
                ## https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference
                #set($resourcePath = $context.resourcePath)
                #if($debugVTL) "DEBUG_resourcePath": "$resourcePath",
                #end
                #set($domainName = $context.domainName)
                #if($debugVTL) "DEBUG_domainName": "$domainName",
                #end
                #set($stageName = $context.stage)
                #if($debugVTL) "DEBUG_stageName": "$stageName",
                #end
                #set($pathText = $context.path)
                #if($debugVTL) "DEBUG_pathText": "$pathText",
                #end
                #set($folders = [])
                #set($foldersExtended = [])
                #foreach($part in $input.body.split("<CommonPrefixes>"))
                    #if($foreach.index > 0)  ## index starts with 0, first part is not required 
                        #set($segment = $part.replaceAll("<Prefix>", ""))  ## remove <Prefix> text from part
                        #set($name = $segment.split("</Prefix>")[0]) ## get all text before the prefix
                        #if($name != "")
                            #set($void = $folders.add($name))
                            #set($void = $foldersExtended.add("https://$domainName$pathText$name"))
                        #end        
                    #end 
                #end
                #if($debugVTL) "DEBUG_folders": "$folders",
                #end
                ##
                ## This is where the required output is created
                ## ============================================
                ##
                ## Create the folderlist in JSON format 
                "folderlist": [
                    #foreach($prefix in $foldersExtended)
                        "$prefix"#if($foreach.hasNext),#end  ##add the prefix and a , after every prefix. Except for the last one
                #end
                ]
                ## End of JSON output
                }

          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  PUT  /{complex}
  #  Create complex folder 
  #  
  #  zero-byte object ending with /  
  #
  #  The / at the end indicates that it is a folder
  #  
  ###############################################################################
  #
  # === WORKS ===
  #
  ComplexPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ComplexResource
      HttpMethod: PUT

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true

      # Integration request settings
      # ----------------------------
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/'
        RequestParameters:
          integration.request.path.complex: 'method.request.path.complex'
        PassthroughBehavior: WHEN_NO_MATCH

        # Integration response settings
        # ----------------------------
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  GET  /{complex}/{zip_no}
  #  GET  /{complex}/{zip_no}/
  #  List file names
  ###############################################################################
  #
  # === NEEDS TESTING ===
  #
  ZipNoGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ZipResource
      HttpMethod: GET

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true
        method.request.path.zip_no: true

      # Integration request settings
      # ----------------------------
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/{zip_no}/'
        RequestParameters:
          integration.request.querystring.list-type: "'2'"
          integration.request.path.complex: 'method.request.path.complex'
          integration.request.path.zip_no: 'method.request.path.zip_no'
        PassthroughBehavior: WHEN_NO_TEMPLATES

        # Integration response settings
        # ----------------------------
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Content-Type: "'application/json'"
            ResponseTemplates:
              application/xml: |
                #set($inputRoot = $input.path('$'))
                #set($objects = [])
                #if($inputRoot.ListBucketResult.Contents)
                  #foreach($content in $inputRoot.ListBucketResult.Contents)
                    #set($keyStr = $content.Key.toString())
                    #if(!$keyStr.endsWith('/'))
                      #set($lastSlash = $keyStr.lastIndexOf('/'))
                      #if($lastSlash >= 0)
                        #set($fileName = $keyStr.substring($lastSlash + 1))
                      #else
                        #set($fileName = $keyStr)
                      #end
                      #set($fileObj = {
                        "name": $fileName,
                        "size": $content.Size,
                        "lastModified": $content.LastModified.toString()
                      })
                      #set($void = $objects.add($fileObj))
                    #end
                  #end
                #end
                $util.toJson($objects)
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 404
            SelectionPattern: '404'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  PUT  /{complex}/{zip_no}
  #  Create zip_no folder
  #  
  #  zero-byte object ending with /  
  #
  #  The / at the end indicates that it is a folder
  #
  ###############################################################################
  #
  # === WORKS ===
  #
  ZipNoPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ZipResource
      HttpMethod: PUT

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true
        method.request.path.zip_no: true

      # Integration request settings
      # ----------------------------
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Credentials: !GetAtt ApiGatewayRole.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/{zip_no}/'
        RequestParameters:
          integration.request.path.complex: 'method.request.path.complex'
          integration.request.path.zip_no: 'method.request.path.zip_no'
        PassthroughBehavior: WHEN_NO_MATCH

        # Integration response settings
        # ---------------------------- 
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  GET /{complex}/{zip_no}/{filename}
  #  Return the actual file (text/pdf/docx)
  ###############################################################################
  #
  # === WORKS ===
  #
  FileGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FileResource
      HttpMethod: GET

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true
        method.request.path.filename: true
        method.request.path.zip_no: true

      # Integration request settings
      # ----------------------------
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/{zip_no}/{filename}'
        Credentials: !GetAtt ApiGatewayRole.Arn
        RequestParameters:
          integration.request.path.complex: 'method.request.path.complex'
          integration.request.path.zip_no: 'method.request.path.zip_no'
          integration.request.path.filename: 'method.request.path.filename'
        PassthroughBehavior: WHEN_NO_MATCH

        # Integration response settings
        # ----------------------------
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 404
            SelectionPattern: '404'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  PUT /{complex}/{zip_no}/{filename}
  #  Upload file (text/pdf/docx)
  ###############################################################################
  #
  # === WORKS ===
  #
  FilePutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FileResource
      HttpMethod: PUT

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true
        method.request.path.filename: true
        method.request.path.zip_no: true

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: AWS
        IntegrationHttpMethod: PUT
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/{zip_no}/{filename}'
        Credentials: !GetAtt ApiGatewayRole.Arn
        RequestParameters:
          integration.request.path.complex: 'method.request.path.complex'
          integration.request.path.zip_no: 'method.request.path.zip_no'
          integration.request.path.filename: 'method.request.path.filename'
        PassthroughBehavior: WHEN_NO_MATCH

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  DELETE /{complex}/{zip_no}/{filename}
  #  Upload file (text/pdf/docx)
  ###############################################################################
  #
  # === NEEDS TESTING ===
  #
  FileDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FileResource
      HttpMethod: DELETE

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.complex: true
        method.request.path.filename: true
        method.request.path.zip_no: true

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: AWS
        IntegrationHttpMethod: DELETE
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/{complex}/{zip_no}/{filename}'
        Credentials: !GetAtt ApiGatewayRole.Arn
        RequestParameters:
          integration.request.path.complex: 'method.request.path.complex'
          integration.request.path.zip_no: 'method.request.path.zip_no'
          integration.request.path.filename: 'method.request.path.filename'

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 204
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 403
            SelectionPattern: '403'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 404
            SelectionPattern: '404'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 204
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 403
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 404
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ###############################################################################
  #  CORS OPTIONS on every resource
  ###############################################################################
  ###############################################################################
  #  OPTIONS /
  #  
  ###############################################################################
  #
  # === WORKS ===
  #
  OptionsRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !GetAtt RestApi.RootResourceId
      HttpMethod: OPTIONS

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: false

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: MOCK

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  ###############################################################################
  #  OPTIONS /{complex}
  #  
  ###############################################################################
  #
  # === WORKS ===
  #
  OptionsComplex:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ComplexResource
      HttpMethod: OPTIONS

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: false

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: MOCK

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  ###############################################################################
  #  OPTIONS /{complex}/{zip_no}
  #  
  ###############################################################################
  #
  # === WORKS ===
  #
  OptionsZipNo:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ZipResource
      HttpMethod: OPTIONS

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: false

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: MOCK

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  ###############################################################################
  #  OPTIONS /{complex}/{zip_no}/{filename}
  #  
  ###############################################################################
  #
  # === WORKS ===
  #
  OptionsFile:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FileResource
      HttpMethod: OPTIONS

      # Method request settings
      # ----------------------------
      AuthorizationType: NONE
      ApiKeyRequired: false

      # Integration request settings
      # ---------------------------- 
      Integration:
        Type: MOCK

        # Integration response settings
        # ----------------------------     
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: !Ref APICORSAllowOrigin
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

      # Method response settings
      # ----------------------------
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  ###############################################################################
  #  Deployment & Stage
  ###############################################################################
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootGetMethod
      - ComplexGetMethod
      - ComplexPutMethod
      - ZipNoGetMethod
      - ZipNoPutMethod
      - FileGetMethod
      - FilePutMethod
      - FileDeleteMethod
      - OptionsRoot
      - OptionsComplex
      - OptionsZipNo
      - OptionsFile
    Properties:
      RestApiId: !Ref RestApi

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment
      StageName: !Ref APIStageName
      Description: !Sub 'Stage for ${APIName}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: 200
          ThrottlingRateLimit: 100
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod", "resourcePath":"$context.resourcePath", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength", "error":"$context.error.message", "integrationError":"$context.integration.error" }'

###############################################################################
#  Outputs
###############################################################################
Outputs:
  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  S3BucketArn:
    Description: ARN of the S3 bucket
    Value: !GetAtt DocumentsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'

  RestApiId:
    Description: REST API id
    Value: !Ref RestApi
    Export:
      Name: !Sub '${AWS::StackName}-RestApiId'

  RestApiUrl:
    Description: Invoke URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/'
    Export:
      Name: !Sub '${AWS::StackName}-RestApiUrl'

  ApiKeyId:
    Description: API Key ID (use AWS CLI to retrieve the actual key value)
    Value: !Ref ApiKey
    Export:
      Name: !Sub '${AWS::StackName}-ApiKeyId'

  ApiGatewayRoleArn:
    Description: ARN of the API Gateway IAM role
    Value: !GetAtt ApiGatewayRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayRoleArn'

  CloudWatchLogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref ApiGatewayLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogGroupName'

  GetApiKeyCommand:
    Description: AWS CLI command to retrieve the API key value
    Value: !Sub 'aws apigateway get-api-key --api-key ${ApiKey} --include-value --query "value" --output text'
